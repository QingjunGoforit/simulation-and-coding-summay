https://numpy.org/devdocs/user/quickstart.html
https://numpy.org/devdocs/user/numpy-for-matlab-users.html

  1. create array
    a=np.array([][])
  
  2. np.zeros(())
    np.ones(())
  
  3. create equal space array
    np.arrange()
    np.linspace()
  
  4. matrix operation
    A * B     # elementwise product
    ~~~ A @ B     # matrix product
    ~~~ A.dot(B)  # another matrix product
    ~~~ A.T  # returns the array, transposed
    
  4. slice
    One-dimensional arrays can be indexed, sliced and iterated over, much like lists and other Python sequences.
    
  5. generate random number
    a. Random Floats:
      numpy.random.rand(): Generates random floats in the half-open interval [0.0, 1.0).
        import numpy as np
        random_floats = np.random.rand(3, 2)  # 3x2 array of random floats
    b. Random Normal Distribution:
      numpy.random.randn(): Generates samples from the standard normal distribution (mean=0, std=1).
        random_normals = np.random.randn(3, 2)  # 3x2 array of random normal values
  
  6. get the information
    ndarray.ndim: the number of axes (dimensions) of the array.
    ndarray.shape: the dimensions of the array. This is a tuple of integers indicating the size of the array in each dimension. For a matrix with n rows and m columns, shape will be (n,m). The length of the shape tuple is therefore the number of axes, ndim.
    ndarray.size: the total number of elements of the array. This is equal to the product of the elements of shape.
  



Some key differences between numpy and matlab:
In MATLAB, the basic type, even for scalars, is a multidimensional array. Array assignments in MATLAB are stored as 2D arrays of double precision floating point numbers, unless you specify the number of dimensions and type. Operations on the 2D instances of these arrays are modeled on matrix operations in linear algebra.
In NumPy, the basic type is a multidimensional array. Array assignments in NumPy are usually stored as n-dimensional arrays with the minimum type required to hold the objects in sequence, unless you specify the number of dimensions and type. NumPy performs operations element-by-element, so multiplying 2D arrays with * is not a matrix multiplication – it’s an element-by-element multiplication. (The @ operator, available since Python 3.5, can be used for conventional matrix multiplication.)
MATLAB numbers indices from 1; a(1) is the first element. See note INDEXING
NumPy, like Python, numbers indices from 0; a[0] is the first element.
MATLAB’s scripting language was created for linear algebra so the syntax for some array manipulations is more compact than NumPy’s. On the other hand, the API for adding GUIs and creating full-fledged applications is more or less an afterthought.
NumPy is based on Python, a general-purpose language. The advantage to NumPy is access to Python libraries including: SciPy, Matplotlib, Pandas, OpenCV, and more. In addition, Python is often embedded as a scripting language in other software, allowing NumPy to be used there too.
MATLAB array slicing uses pass-by-value semantics, with a lazy copy-on-write scheme to prevent creating copies until they are needed. Slicing operations copy parts of the array.
NumPy array slicing uses pass-by-reference, that does not copy the arguments. Slicing operations are views into an array.
